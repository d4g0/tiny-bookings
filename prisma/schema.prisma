generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model booking {
  id               Int              @id @default(autoincrement())
  client_id        Int
  state            Int
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  bill             Int
  check_in_date    DateTime         @db.Timestamp(6)
  check_out_date   DateTime         @db.Timestamp(6)
  number_of_guests Int
  paymet_type      Int
  clients          clients          @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_owner")
  payment_type     payment_type     @relation(fields: [paymet_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_type")
  rooms_bookings   rooms_bookings[]
}

model hotel {
  id                          Int      @id @default(autoincrement())
  name                        String
  maximun_free_calendar_days  Int
  check_in_hour_time          DateTime @db.Timestamp(6)
  check_out_hour_time         DateTime @db.Timestamp(6)
  minimal_prev_days_to_cancel Int?
  room                        room[]
}

model room {
  id              Int               @id @default(autoincrement())
  hotel_id        Int
  name            String            @db.VarChar(40)
  night_price     Decimal           @db.Decimal
  capacity        Int
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  beds            Int
  hotel           hotel             @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hotel-link")
  locks_rooms     locks_rooms[]
  room_pictures   room_pictures[]
  rooms_amenities rooms_amenities[]
  rooms_bookings  rooms_bookings[]
}

model room_pictures {
  id       Int    @id @default(autoincrement())
  filename String
  room_id  Int?
  room     room?  @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_id")
}

model rooms_bookings {
  id         Int      @id @default(autoincrement())
  booking_id Int?
  room_id    Int?
  booking    booking? @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_id")
  room       room?    @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_id")
}

model admins {
  id            Int        @id @default(autoincrement())
  user_role     Int
  name          String     @db.VarChar(40)
  description   String?    @db.VarChar(150)
  hash_password String
  reset_token   String?
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  user_roles    user_roles @relation(fields: [user_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role")
}

model booking_state {
  id    Int    @id @default(autoincrement())
  state String @db.VarChar(60)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model clients {
  user_role     Int?
  name          String      @db.VarChar(60)
  last_name     String      @db.VarChar(60)
  hash_password String?
  reset_token   String?
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  email         String?     @db.VarChar(100)
  id            Int         @id @default(autoincrement())
  user_roles    user_roles? @relation(fields: [user_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role")
  booking       booking[]
}

model lock {
  id          Int           @id @default(autoincrement())
  start_date  DateTime      @db.Timestamp(6)
  end_date    DateTime      @db.Timestamp(6)
  reason      String
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  locks_rooms locks_rooms[]
}

model locks_rooms {
  id      Int   @id @default(autoincrement())
  lock_id Int?
  room_id Int?
  lock    lock? @relation(fields: [lock_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lock_id")
  room    room? @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_id")
}

model payment_type {
  id      Int       @id @default(autoincrement())
  type    String    @db.VarChar(60)
  booking booking[]
}

model room_amenity {
  id              Int               @id @default(autoincrement())
  name            String
  rooms_amenities rooms_amenities[]
}

model rooms_amenities {
  id           Int          @id @default(autoincrement())
  amenity_id   Int
  room_id      Int
  room_amenity room_amenity @relation(fields: [amenity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "amenity_link")
  room         room         @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_link")
}

model user_roles {
  id      Int       @id @default(autoincrement())
  role    String    @db.VarChar(10)
  admins  admins[]
  clients clients[]
}
