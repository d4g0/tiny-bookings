generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model booking {
  id               Int                @id @default(autoincrement())
  client_id        Int?
  hotel_id         Int
  booking_state    Int?
  payment_type     Int?
  currency         Int?
  total_price      Decimal            @db.Decimal
  start_date       DateTime           @db.Timestamp(0)
  end_date         DateTime           @db.Timestamp(0)
  number_of_guests Int
  created_at       DateTime?          @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(0)
  booking_states   booking_states?    @relation(fields: [booking_state], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_state_link")
  clients          clients?           @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "client_link")
  currencies       currencies?        @relation(fields: [currency], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currency_link")
  hotel            hotel              @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_hotel_ownership")
  payment_types    payment_types?     @relation(fields: [payment_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_type_link")
  room_lock_period room_lock_period[]
  rooms_bookings   rooms_bookings[]
}

model hotel {
  id                          Int       @id @default(autoincrement())
  hotel_name                  String    @unique(map: "unique_hotel_name") @db.VarChar(100)
  maximun_free_calendar_days  Int       @default(30)
  check_in_hour_time          DateTime  @db.Time(6)
  check_out_hour_time         DateTime  @db.Time(6)
  minimal_prev_days_to_cancel Int       @default(5)
  iana_time_zone              String    @db.VarChar(60)
  booking                     booking[]
  room                        room[]
}

model room {
  id               Int                @id @default(autoincrement())
  hotel_id         Int
  room_name        String             @unique(map: "unique_room_name") @db.VarChar(20)
  night_price      Decimal            @db.Decimal
  capacity         Int
  number_of_beds   Int
  created_at       DateTime?          @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(0)
  room_type        Int?
  hotel            hotel              @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hotel_id")
  room_types       room_types?        @relation(fields: [room_type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room_lock_period room_lock_period[]
  room_pictures    room_pictures[]
  rooms_amenities  rooms_amenities[]
  rooms_bookings   rooms_bookings[]
}

model room_pictures {
  id       Int    @id @default(autoincrement())
  room_id  Int
  filename String
  room     room   @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_link")
}

model rooms_bookings {
  room_id    Int
  booking_id Int
  booking    booking @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_link")
  room       room    @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_link")

  @@id([room_id, booking_id], map: "unique_room_booking_unit")
}

model admins {
  id                Int        @id @default(autoincrement())
  user_role         Int
  admin_name        String     @unique(map: "unique_admin_name") @db.VarChar(100)
  admin_description String?    @db.VarChar(150)
  hash_password     String
  reset_token       String?
  created_at        DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(0)
  email             String     @unique(map: "unique_admin_email") @db.VarChar(80)
  user_roles        user_roles @relation(fields: [user_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model clients {
  id                Int        @id @default(autoincrement())
  user_role         Int
  client_name       String     @db.VarChar(60)
  client_last_name  String     @db.VarChar(60)
  hash_password     String?
  email             String?    @unique(map: "unique_email") @db.VarChar(120)
  is_email_verified Boolean    @default(false)
  reset_token       String?
  created_at        DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(0)
  user_roles        user_roles @relation(fields: [user_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role")
  booking           booking[]
}

model room_amenity {
  id              Int               @id @default(autoincrement())
  amenity         String            @unique(map: "unique_amenity") @db.VarChar(100)
  rooms_amenities rooms_amenities[]
}

model rooms_amenities {
  room_id      Int
  amenity_id   Int
  room_amenity room_amenity @relation(fields: [amenity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "amenity_id_link")
  room         room         @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_id_link")

  @@id([room_id, amenity_id], map: "id")
}

model user_roles {
  id        Int       @id @default(autoincrement())
  user_role String    @unique(map: "unique_user_role") @db.VarChar(40)
  admins    admins[]
  clients   clients[]
}

model booking_states {
  id            Int       @id @default(autoincrement())
  booking_state String    @unique(map: "unique_booking_state") @db.VarChar(40)
  booking       booking[]
}

model currencies {
  id       Int       @id @default(autoincrement())
  currency String    @unique(map: "unique_currency") @db.VarChar(10)
  booking  booking[]
}

model payment_types {
  id           Int       @id @default(autoincrement())
  payment_type String    @unique(map: "unique_payment_types") @db.VarChar(60)
  booking      booking[]
}

model room_lock_period {
  id           Int                    @id @default(autoincrement())
  room_id      Int?
  start_date   DateTime               @db.Timestamp(0)
  end_date     DateTime               @db.Timestamp(0)
  reason       String?                @db.VarChar(300)
  created_at   DateTime?              @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(0)
  during       Unsupported("tsrange")
  is_a_booking Boolean                @default(false)
  booking_id   Int?
  booking      booking?               @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_reference")
  room         room?                  @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_link")
}

model room_types {
  id        Int    @id @default(autoincrement())
  room_type String @unique(map: "unque_room_type") @db.VarChar(30)
  room      room[]
}
